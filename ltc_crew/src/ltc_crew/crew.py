import os
from crewai import Agent, Crew, Process, Task, LLM
from crewai.project import CrewBase, agent, crew, task
from crewai.agents.agent_builder.base_agent import BaseAgent
from typing import List, Any
from crewai.tools import BaseTool

# Uncomment the following line to use an example of a custom tool
# from ltc_crew.tools.custom_tool import MyCustomTool

# Check our tools folder for tools
from ltc_crew.tools.ltc_search_tool import TaiwanLTCProviderSearchTool

# Define a placeholder tool
class HumanInputTool(BaseTool):
    name: str = "Human Input Tool"
    description: str = "A placeholder tool to ensure the agent waits for human input via API."

    def _run(self, **kwargs: Any) -> Any:
        # This tool is not meant to be executed, return an empty string.
        return ""

@CrewBase
class LtcCrew():
    """LtcCrew crew"""
    agents_config = 'config/agents.yaml'
    tasks_config = 'config/tasks.yaml'

    def __init__(self) -> None:
        self.google_llm = LLM(
            model="gemini/gemini-2.5-flash",
            api_key=os.environ.get("GOOGLE_API_KEY")
        )

    @agent
    def intake_coordinator(self) -> Agent:
        return Agent(
            config=self.agents_config['intake_coordinator'],
            llm=self.google_llm,
            verbose=True
        )

    @agent
    def clinical_assessor(self) -> Agent:
        return Agent(
            config=self.agents_config['clinical_assessor'],
            llm=self.google_llm,
            verbose=True
        )

    @agent
    def care_navigator(self) -> Agent:
        return Agent(
            config=self.agents_config['care_navigator'],
            llm=self.google_llm,
            verbose=True
        )

    @agent
    def local_resource_specialist(self) -> Agent:
        return Agent(
            config=self.agents_config['local_resource_specialist'],
            tools=[TaiwanLTCProviderSearchTool()],
            llm=self.google_llm,
            verbose=True
        )

    @agent
    def reporting_specialist(self) -> Agent:
        return Agent(
            config=self.agents_config['reporting_specialist'],
            llm=self.google_llm,
            verbose=True
        )

    @agent
    def human_input_agent(self) -> Agent:
        return Agent(
            role="Human Input Provider",
            goal="To provide human feedback and verification on the generated care plan summary.",
            backstory="You are the human in the loop, responsible for reviewing AI-generated content for accuracy and completeness, providing necessary adjustments.",
            llm=self.google_llm,
            tools=[HumanInputTool()],
            allow_delegation=False,
            verbose=True
        )

    @task
    def profile_analysis(self) -> Task:
        return Task(
            config=self.tasks_config['profile_analysis'],
            agent=self.intake_coordinator()
        )

    @task
    def human_verification_task(self) -> Task:
        return Task(
            description="""
            Review the structured case summary generated by the Patient Intake Specialist.
            The summary is automatically included in the context.
            Please provide your feedback, corrections, or additional information.
            Your input is crucial for creating an accurate and personalized needs assessment.
            For example, you could add: "Also, my mother has diabetes and needs to control her sugar intake."
            """,
            expected_output="A confirmation of the summary, along with any additional notes, corrections, or instructions provided by the human reviewer. This will be passed to the next agent.",
            agent=self.human_input_agent(),
            human_input=True,
            context=[self.profile_analysis()]
        )

    @task
    def needs_assessment(self) -> Task:
        return Task(
            config=self.tasks_config['needs_assessment'],
            agent=self.clinical_assessor(),
            context=[self.human_verification_task()]
        )

    @task
    def care_recommendation(self) -> Task:
        return Task(
            config=self.tasks_config['care_recommendation'],
            agent=self.care_navigator(),
            context=[self.human_verification_task()]
        )
    
    @task
    def provider_search(self) -> Task:
        return Task(
            config=self.tasks_config['provider_search'],
            agent=self.local_resource_specialist(),
            context=[self.profile_analysis(), self.care_recommendation()]
        )

    @task
    def comprehensive_report(self) -> Task:
        return Task(
            config=self.tasks_config['comprehensive_report'],
            agent=self.reporting_specialist(),
            context=[
                self.profile_analysis(),
                self.needs_assessment(),
                self.human_verification_task(),
                self.care_recommendation(),
                self.provider_search()
            ]
        )

    @crew
    def crew(self) -> Crew:
        """Creates the LtcCrew crew"""
        worker_agents = [
            self.intake_coordinator(),
            self.clinical_assessor(),
            self.human_input_agent(),
            self.care_navigator(),
            self.local_resource_specialist(),
            self.reporting_specialist()
        ]
        return Crew(
            agents=worker_agents,
            tasks=self.tasks,
            process=Process.sequential,
            verbose=True
        )
